const admin=require("firebase-admin"),User=require("../models/user"),PUBLIC_ROUTES=require("../config").PUBLIC_ROUTES,ADMIN_ROUTES=require("../config").ADMIN_ROUTES;let getRole=(req,res,next)=>{req.session.user&&(req.session.role=req.session.user.role),next()},isAdmin=(req,res,next)=>{"admin"===req.session.role?next():res.redirect("/dashboard")},isGuest=(req,res,next)=>{req.session.user?res.redirect("/dashboard"):next()},isAuth=(req,res,next)=>{req.session.user?next():res.redirect("/login")};async function createSessionCookie(req,res){const idToken=req.body.idToken.toString()||"";if(console.log("Creating a session cookie with the Firebase ID token: "+idToken),!idToken||"undefined"===idToken||"null"===idToken||""===idToken)return void res.status(401).send("UNAUTHORIZED REQUEST!");let expiresIn=432e6,storage="session";admin.auth().createSessionCookie(idToken,{expiresIn:432e6},storage).then(sessionCookie=>{res.cookie("token",sessionCookie,{maxAge:432e6,httpOnly:!0},{sameSite:"none",secure:!0}),console.log("session cookie created successfully",sessionCookie),req.session.token=sessionCookie,admin.auth().verifySessionCookie(sessionCookie,!0).then(decodedClaims=>{console.log("session cookie verified successfully"),console.log(decodedClaims),console.log("user added to session"),req.session.role=getRole(decodedClaims).then(role=>{req.session.role=role,req.session.user.role=role,req.session.save(),console.log("role added to session")}).catch(err=>{console.log(err)}),res.status(200).send("SUCCESS")}).catch(error=>{console.log(error),res.status(401).send("UNAUTHORIZED REQUEST!")})},error=>{console.log(error),res.status(401).send("UNAUTHORIZED REQUEST!")})}function verifySessionCookie(req,res,next){let sessionCookie=req.cookies.token||req.session.token||"";sessionCookie&&"undefined"!==sessionCookie&&"null"!==sessionCookie&&""!==sessionCookie?sessionCookie&&admin.auth().verifySessionCookie(sessionCookie,!0).then(decodedClaims=>{console.log("session cookie verified successfully"),console.log("user added to session"),res.locals.user=decodedClaims,res.locals.token=decodedClaims,res.locals.role=getRole(decodedClaims),res.session.user=decodedClaims,res.locals.user=decodedClaims,res.locals.token=sessionCookie,req.session.user=decodedClaims}).catch(error=>{console.log(error)}):next(),req.session.token&&"undefined"!==req.session.token&&"null"!==req.session.token&&""!==req.session.token?next():res.status(401).redirect("/login")}function checkAuth(req,res,next){return console.log(req.session),console.log(res.locals),req.session.token?ADMIN_ROUTES.includes(req.path)&&"admin"!==req.session.role?(console.log("Aunthentication failed for admin route"),void res.status(401).redirect("/dashboard")):PUBLIC_ROUTES.includes(req.path)?(console.log(`Skipping auth middleware for ${req.path}`),void next()):(console.log("Checking session cookie"),void verifySessionCookie(req,res,next)):(console.log("No user in session"),void res.status(401).redirect("/login"))}function checkSessionCookie(req,res,next){let sessionCookie=req.cookies.token||req.session.token||"";sessionCookie&&"undefined"!==sessionCookie&&"null"!==sessionCookie&&""!==sessionCookie?sessionCookie&&admin.auth().verifySessionCookie(sessionCookie,!0).then(decodedClaims=>{console.log("session cookie verified successfully"),console.log("user added to session"),req.session.user=decodedClaims}).catch(error=>{console.log(error)}):next(),req.session.token&&"undefined"!==req.session.token&&"null"!==req.session.token&&""!==req.session.token?res.status(401).redirect("/dashboard"):next()}exports.checkAuth=checkAuth,exports.createSessionCookie=createSessionCookie,exports.verifySessionCookie=verifySessionCookie;